using System.Collections;
using System.Collections.Generic;
using CrazyMinnow.SALSA;
using UnityEngine;
using UnityEngine.Video;
using System.IO;



public class AppManager : MonoBehaviour
{
    // The one and only instance of this class
    public static AppManager Instance { get; private set; }



    // A list of feedbacks imported from a json
    FeedbackList feedbackListItems;
    string activeFeedbackTitle;
    int firstFrameIndex = 0;
    // Feedback resources and interpreters
    string audioClipPath = "Audio/ah_cest_horrible";
    private AudioSource audioSource;
    string videoClipPath = "Video/ah_cest_horrible";
    public VideoPlayer player;
    string openFacePath = "OpenFace/ah_cest_horrible";
    // A .csv file generated by OpenFace. Should include AU's, Pose and Gaze ONLY!!!
    public TextAsset actionUnitData;
    // A list of structures imported from a .csv file containing data frame by frame
    List<Frame> frames = new List<Frame>();



    // Game Objects manipulated by the script
    public Transform Camera;
    public Transform activeAvatar;
    public GameObject[] avatars;
    Transform headBone;
    SkinnedMeshRenderer[] smRenderers = new SkinnedMeshRenderer[2];
    AudioSource voice;
    AudioSource mute = new AudioSource();
    // Eyes object in SALSA
    Eyes eyes;
    [SerializeField] BlendshapeAnimator blendshapeAnimator;
    [SerializeField] FeedbackRecorder feedbackRecorder;
    public AnimParam parameters;
    GameObject ui;

    // Videoplayer related variables
    float time = 0f;
    bool isFeedbackPlayed = false;
    int frameIndex = 0;
    // Flags controlled by UI checkboxes
    bool vidSync = false;
    bool hideUI = false;
    public bool frameInterpol = true;
    public bool lipSynched = true;
    public bool noiseReduced = false;




    // A list of getters for other scripts
    public Transform GetCamera() { return Camera; }
    public SkinnedMeshRenderer[] GetSMRenderers() { return smRenderers; }
    public Transform GetHeadBone() { return headBone; }
    public FeedbackList GetFeedbackList() { return feedbackListItems; }
    public List<Frame> GetOgFrames() { return frames; }
    public int GetFirstFrameIndex() { return firstFrameIndex; }

    public void FindFirstFrame()
    {
        int i = 0;

        foreach (Frame frame in frames)
        {
            //Debug.Log("frame confidence: " + frame.confidence);

            if (frame.confidence > 0.5)
            {
                firstFrameIndex = i;
                //Debug.Log("first frame : " + i);
                break;
            }

            i++;
        }
    }

    // Salsa lip-sync getter/setter
    public bool GetEyeAnimsEnabled()
    {
        return eyes.blinkEnabled || eyes.eyeEnabled; // true if any is enabled
    }
    public void SetEyeAnimsEnabled(bool status)
    {
        eyes.EnableEyelidBlink(status);
        eyes.EnableEye(status);
    }


    // Functions affected by UI
    public void ToggleVidSync(bool value)
    {
        vidSync = value;
        player.Prepare();
    }
    public void ToggleUIOnRec(bool value)
    {
        hideUI = value;
    }
    public void ToggleFrameInterpol(bool value)
    {
        frameInterpol = value;
        blendshapeAnimator.SetFeedback();
    }
    public void ToggleLipSync(bool value)
    {
        foreach (GameObject avatar in avatars)
        {
            if (value)
                avatar.GetComponent<Salsa>().audioSrc = voice;
            else
                avatar.GetComponent<Salsa>().audioSrc = mute;


        }
        lipSynched = false;
    }
    public void ToggleNoiseReduction(bool value)
    {
        noiseReduced = value;
    }
    public void LoadFeedbackRessources(int feedbackID)
    {
        activeFeedbackTitle = feedbackListItems.elements[feedbackID].name;


        audioClipPath = feedbackListItems.elements[feedbackID].path_Audio;
        audioSource = GetComponent<AudioSource>();
        AudioClip audioClip = Resources.Load<AudioClip>(audioClipPath);

        if (audioClip != null)
        {
            // Set the loaded audio clip to the AudioSource
            audioSource.clip = audioClip;

        }
        else
        {
            Debug.LogError("Failed to load audio clip from Resources folder: " + audioClipPath);
        }


        videoClipPath = feedbackListItems.elements[feedbackID].path_Video;
        VideoClip videoClip = Resources.Load<VideoClip>(videoClipPath);

        if (videoClip != null)
        {
            // Set the loaded video clip to the VideoPlayer
            player.clip = videoClip;
            player.Prepare();
        }
        else
        {
            Debug.LogError("Failed to load video clip from Resources folder: " + videoClipPath);
        }

        openFacePath = feedbackListItems.elements[feedbackID].path_OpenFace;
        actionUnitData = Resources.Load<TextAsset>(openFacePath);
        frames = CsvImporter.ParseCSV(actionUnitData);
        //Debug.Log("about to find 1st frame");
        FindFirstFrame();

        blendshapeAnimator.SetFeedback();

        Debug.Log("Video frames : " + player.frameCount + " | OpenFace frames : " + frames.Count);

        if (actionUnitData == null)
        {
            Debug.LogError("Failed to load OpenFace csv from Resources folder: " + openFacePath);
        }
        

    }


    // Avatar-related functions
    public void SetAvatarProps()
    {
        headBone = activeAvatar.Find("CC_Base_BoneRoot").GetChild(0).GetChild(1).GetChild(0).GetChild(0).GetChild(2).GetChild(0).GetChild(0);


        smRenderers[0] = activeAvatar.Find("Brows").GetComponent<SkinnedMeshRenderer>();
        smRenderers[1] = activeAvatar.Find("CC_Base_Body").GetComponent<SkinnedMeshRenderer>();
        //smRenderers[2] = activeAvatar.GetChild(0).Find("Brows_Extracted0").GetComponent<SkinnedMeshRenderer>();

        eyes = activeAvatar.GetComponent<Eyes>();
    }
    public void ChangeActiveAvatar(int value)
    {
        for (int i = 0; i < avatars.Length; i++)
        {
            if (i == value)
            {
                avatars[i].SetActive(true);
            }
            else
            {
                avatars[i].SetActive(false);
            }
        }

        activeAvatar = avatars[value].transform;
        SetAvatarProps();
        blendshapeAnimator.SetAvatarProps();
    }


    public void ResetRecording()
    {
        if (feedbackRecorder != null && feedbackRecorder.m_RecorderController != null)
        {
            if (feedbackRecorder.m_RecorderController.IsRecording())
            {
                Debug.Log($"Feedback is played preparing to end recording");
                StartCoroutine(RecordStopDelay(1));
            }

        }
    }
    // Feedback playback functions

    public void PlayFeedback()
    {
        // Check if the VideoPlayer component is attributed
        if (vidSync && player != null)
        {
            // play the video assigned to the VideoPlayer component only then play the avatar's animation
            
            player.Play();

            isFeedbackPlayed = true;

            voice.Play();

        }
        else
        {
            //if there's no VideoPlayer assigned, the animation is good on its own
            isFeedbackPlayed = true;

            voice.Play();
        }
    }
    public void PlayFeedbackUpdate()
    {

        //Debug.Log((int)player.frame);

        //if VideoPlayer is active it overrides normal frame index
        if (vidSync && player != null)
        {
            frameIndex = (int)player.frame;
        }

        //if VideoPlayer's active frame isn't null or videoplayer is disabled
        if ((int)player.frame > -1 || !vidSync || player == null)
        {
            //Debug.Log(frameIndex + " | " + (frames.Count - 1));

            if (frameIndex < frames.Count - 1)
            {
                if (frameIndex >= firstFrameIndex)
                    blendshapeAnimator.PrepareFExpression(time, frameIndex);

                // set back animation time if VideoPlayer is active and lags behind
                if (vidSync && player != null)
                {
                    if (time > player.time + 0.04 || time < player.time)
                        time = frames[(int)player.frame].timestamp;
                }
            }
            // case for the last frame
            else if (frameIndex == frames.Count - 1)
            {
                if (frameIndex >= firstFrameIndex)
                    blendshapeAnimator.PrepareFExpression(time, frameIndex);

                // reset values after the video ends
                ResetPlayFeedback();
                ResetRecording();
            }
            else if (frameIndex > frames.Count - 1)
            {
                // reset values after the video ends
                Debug.Log("frame index: " + frameIndex + " | last frame: " + (frames.Count - 1));
                ResetPlayFeedback();
                ResetRecording();
            }

            if ((!vidSync || player == null) && time > frames[frameIndex].timestamp)
            {
                //Debug.Log("frameIndex + 1");
                frameIndex++;
            }

            

        }

        

        // time is unstoppable
        time += Time.deltaTime;

        //bsIndex = smRenderers[1].sharedMesh.GetBlendShapeIndex("Mouth_Smile_L");
        //Debug.Log("frame " + frames[frameIndex].frame + " | time " + time + " | timestamp " + frames[frameIndex].timestamp + " | AU " + frames[frameIndex].AU12_r + " | BS " + smRenderers[1].GetBlendShapeWeight(bsIndex));
    }
    public void ResetPlayFeedback()
    {
        
        frameIndex = 0;
        isFeedbackPlayed = false;
        
        Instance.SetEyeAnimsEnabled(true);
        time = 0f;

        if (vidSync && player != null) {
            player.Stop();
            player.frame = 0;
        }
    }


    // Feedback video recorder functions
    IEnumerator FeedbackPlayDelay(float delay)
    {

        //yield on a new YieldInstruction that waits for 1 seconds.
        yield return new WaitForSeconds(delay);
        PlayFeedback();

    }
    public void RecordFeedback()
    {
        
        if (hideUI)
        {
   
            ui.SetActive(false);
        }
            

        feedbackRecorder.RecorderStart(activeFeedbackTitle);
        StartCoroutine(FeedbackPlayDelay(1));
        
    }
    IEnumerator RecordStopDelay(float delay)
    {
        Debug.Log($"Waiting before stopping recording");
        //yield on a new YieldInstruction that waits for [delay] seconds.
        yield return new WaitForSeconds(delay);
        feedbackRecorder.RecorderStop();
        
        if (hideUI)
            ui.SetActive(true);
        
    }
    IEnumerator RecordAllFeedbackDelay(float delay)
    {
        long fileSize = -1;
        bool fileReady;
        string path;

        foreach (FeedbackElement feedbackElement in feedbackListItems.elements)
        {

            LoadFeedbackRessources(feedbackElement.id);

            fileSize = -1;
            fileReady = false;
            RecordFeedback();

            path = feedbackRecorder.OutputFile.FullName;
            while (feedbackRecorder.m_RecorderController.IsRecording())
            {
                yield return new WaitForSeconds(delay);
            }

            

            while (!fileReady)
            {
                yield return new WaitForSeconds(1f); // Check every second

                if (File.Exists(path))
                {
                    long newFileSize = new FileInfo(path).Length;

                    if (newFileSize == fileSize && fileSize != -1)
                    {
                        // File size hasn't changed, file is likely saved
                        fileReady = true;
                        Debug.Log("File is completely saved and ready to be read.");
                    }
                    else
                    {
                        // Update file size and continue checking
                        fileSize = newFileSize;
                    }
                }

            }
            yield return new WaitForSeconds(3);

        }

    }

    public void RecordAllFeedback()
    {
        StartCoroutine(RecordAllFeedbackDelay(0.1f));
    }






    private void Awake()
    {
        // If there is an instance, and it's not me, delete myself.

        if (Instance != null && Instance != this)
        {
            Destroy(this);
        }
        else
        {
            Instance = this;
        }

        feedbackListItems = JsonImporter.ParseJSON();
    }
    
    // Start is called before the first frame update
    void Start()
    {

        ui = GameObject.Find("Canvas_Menu");

        SetAvatarProps();

        voice = GetComponent<AudioSource>();

        frames = CsvImporter.ParseCSV(actionUnitData);

        LoadFeedbackRessources(0);


    }

    // Update is called once per frame
    void Update()
    {
        
        // Check if a feedback is played
        if (isFeedbackPlayed)
        {
            PlayFeedbackUpdate();
        }



        //if (feedbackRecorder.readyToPlay)
        //{
        //    PlayFeedback();
        //}
    }

}
